//+------------------------------------------------------------------+
//|                                                     olisa_new.mq4|
//|                                       Copyright 2024, MetaQuotes|
//|                                       http://www.metaquotes.net/|
//+------------------------------------------------------------------+
#property strict

// Input parameters
input int WilliamsR_Period = 14;          // Period for Williams %R calculation
input double Trade_Lots = 0.1;             // Lot size for trading
input int MaxTradesPerTrend = 30;          // Maximum number of trades per trend
input int MA_Period = 50;                  // Period for the moving average
input ENUM_MA_METHOD MA_Method = MODE_SMA; // Method for the moving average
input ENUM_APPLIED_PRICE MA_Price = PRICE_CLOSE; // Price type for the moving average

int totalBuyTrades = 0; // Track total buy trades
int totalSellTrades = 0; // Track total sell trades
int OrdersSELL = 0;      // Initialize OrdersSELL variable
int OrdersBUY = 0;       // Initialize OrdersBUY variable

//|$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
//|              Close 
//|   Last Updated 13-12-2013 (added option to close orders in profit pips)
//|$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
#define     NL    "\n" 

extern string dnch="set to false to let the EA close the orders, otherwise only reporting onscreen";
extern bool   DoNotCloseOrders=true;
extern string pth="false:Target in Money, true:in Pips";
extern bool   ProfitTargetInPips = false;//fxdaytrader
extern double ProfitTarget = 25.0;
//extern int    ProfitTarget     = 25;             // closes all orders once Float hits this $ amount
extern bool   CloseAllNow      = false;          // closes all orders now
extern bool   CloseProfitableTradesOnly = false; // closes only profitable trades
extern double ProftableTradeAmount      = 1;     // Only trades above this amount close out
extern bool   ClosePendingOnly = false;          // closes pending orders only
extern bool   UseAlerts        = false;

int Multiplier;
double pips2dbl;



//+------------------------------------------------------------------------+
//| Closes everything
//+------------------------------------------------------------------------+
void CloseAll()
{
   int i;
   bool result = false;

   while(OrdersTotal()>0)
   {
      // Close open positions first to lock in profit/loss
      for(i=OrdersTotal()-1;i>=0;i--)
      {
         if(OrderSelect(i, SELECT_BY_POS)==false) continue;

         result = false;
         if ( OrderType() == OP_BUY)  if (!DoNotCloseOrders) result = OrderClose( OrderTicket(), OrderLots(), MarketInfo(OrderSymbol(), MODE_BID), 15, Red );
         if ( OrderType() == OP_SELL) if (!DoNotCloseOrders) result = OrderClose( OrderTicket(), OrderLots(), MarketInfo(OrderSymbol(), MODE_ASK), 15, Red );
         if (UseAlerts) PlaySound("alert.wav");
      }
      for(i=OrdersTotal()-1;i>=0;i--)
      {
         if(OrderSelect(i, SELECT_BY_POS)==false) continue;

         result = false;
         if ( OrderType()== OP_BUYSTOP)  result = OrderDelete( OrderTicket() );
         if ( OrderType()== OP_SELLSTOP)  result = OrderDelete( OrderTicket() );
         if ( OrderType()== OP_BUYLIMIT)  result = OrderDelete( OrderTicket() );
         if ( OrderType()== OP_SELLLIMIT)  result = OrderDelete( OrderTicket() );
         if (UseAlerts) PlaySound("alert.wav");
      }
      Sleep(1000);
   }
}

//+------------------------------------------------------------------------+
//| cancels all orders that are in profit
//+------------------------------------------------------------------------+
void CloseAllinProfit()
{
  for(int i=OrdersTotal()-1;i>=0;i--)
 {
    if(OrderSelect(i, SELECT_BY_POS))
    {
        bool result = false;
        if ( OrderType() == OP_BUY && OrderProfit()+OrderSwap()+OrderCommission()>ProftableTradeAmount)  if (!DoNotCloseOrders) result = OrderClose( OrderTicket(), OrderLots(), MarketInfo(OrderSymbol(), MODE_BID), 5, Red );
        if ( OrderType() == OP_SELL && OrderProfit()+OrderSwap()+OrderCommission()>ProftableTradeAmount) if (!DoNotCloseOrders) result = OrderClose( OrderTicket(), OrderLots(), MarketInfo(OrderSymbol(), MODE_ASK), 5, Red );
        if (UseAlerts) PlaySound("alert.wav");
    }
    else
    {
        Print("Error selecting order ", GetLastError()); // Add error handling
    }
 }
  return; 
}

//+------------------------------------------------------------------------+
//| cancels all pending orders 
//+------------------------------------------------------------------------+
void ClosePendingOrdersOnly()
{
  for(int i=OrdersTotal()-1;i>=0;i--)
 {
    if(OrderSelect(i, SELECT_BY_POS))
    {
        bool result = false;
        if ( OrderType()== OP_BUYSTOP)   result = OrderDelete( OrderTicket() );
        if ( OrderType()== OP_SELLSTOP)  result = OrderDelete( OrderTicket() );
    }
    else
    {
        Print("Error selecting order ", GetLastError()); // Add error handling
    }
  }
  return; 
  }

//+-----------+
//| Main      |
//+-----------+
int start()
{
   double BuyLots=0.0, SellLots=0.0, BuyProfit=0.0, SellProfit=0.0, BuyProfitPips=0.0, SellProfitPips=0.0;

//+------------------------------------------------------------------+
//  Determine last order price                                       |
//-------------------------------------------------------------------+
      for(int i=0;i<OrdersTotal();i++)
      {
         if(OrderSelect(i,SELECT_BY_POS,MODE_TRADES)==false) continue;
         
         BrokerDigitAdjust(OrderSymbol());//fxdaytrader, for pips calculation
         
         if(OrderType()==OP_BUY)
         {
            OrdersBUY++;
            BuyLots += OrderLots();
            
            //profit target in money
            BuyProfit += OrderProfit() + OrderCommission() + OrderSwap();
            
            //profit target in pips
            BuyProfitPips += (OrderClosePrice()-OrderOpenPrice())/pips2dbl;           
            
         }
         if(OrderType()==OP_SELL) 
         {
            OrdersSELL++;
            SellLots += OrderLots();
            
            //profit target in money
            SellProfit += OrderProfit() + OrderCommission() + OrderSwap();
            
            //profit target in pips
            SellProfitPips += (OrderOpenPrice()-OrderClosePrice())/pips2dbl;
         }
      }               
   
    if(CloseAllNow) CloseAll();
    
    if(CloseProfitableTradesOnly) CloseAllinProfit();
    
    //profit target in money
    if (!ProfitTargetInPips) {
     if(BuyProfit+SellProfit >= ProfitTarget) CloseAll(); 
    }
    
    //profit target in pips
    if (ProfitTargetInPips) {
     if(BuyProfitPips+SellProfitPips >= ProfitTarget) CloseAll(); 
    }
    
    if(ClosePendingOnly) ClosePendingOrdersOnly();
       
   string sprofit=AccountCurrency()+" total Profit (current: "+DoubleToStr(BuyProfit+SellProfit,2)+" "+AccountCurrency()+")";
   if (ProfitTargetInPips) sprofit="Pips total Profit (current: "+DoubleToStr(BuyProfitPips+SellProfitPips,2)+" Pips)";
   
   Comment("           Comments Last Update 13-12-2013 *** forexBaron.net", NL,//Comments Last Update 12-12-2006 10:00pm", NL,
           "           Close Mode: at ",DoubleToStr(ProfitTarget,2)," "+sprofit, NL,
           "              Buys            ", OrdersBUY, NL,
           "              BuyLots         ", BuyLots, NL,
           "              Sells           ", OrdersSELL, NL,
           "              SellLots        ", DoubleToStr(SellLots,2), NL, NL,
           "              BuyProfitPips:  ", DoubleToStr(BuyProfitPips,2), NL,
           "              SellProfitPips: ", DoubleToStr(SellProfitPips,2), NL,
           "              Balance         ", DoubleToStr(AccountBalance(),2)," ",AccountCurrency(), NL,
           "              Equity          ", DoubleToStr(AccountEquity(),2)," ",AccountCurrency(), NL,
           "              Margin          ", DoubleToStr(AccountMargin(),2)," ",AccountCurrency(), NL,
           "              Free Margin     ", DoubleToStr(AccountFreeMargin(),2)," ",AccountCurrency(), NL,
           "              MarginPercent   ", DoubleToStr(MathRound((AccountEquity()/AccountMargin())*100),2),"%", NL,
           "              Current Time is ",TimeHour(CurTime()),":",TimeMinute(CurTime()),".",TimeSeconds(CurTime()));
           
   return 0; // Adding return statement here
} // start()

///////////////////////////////////////////
//added fxdaytrader:

void BrokerDigitAdjust(string symbol) {
 Multiplier = 1;
 if (MarketInfo(symbol,MODE_DIGITS) == 3 || MarketInfo(symbol,MODE_DIGITS) == 5) Multiplier = 10;
 if (MarketInfo(symbol,MODE_DIGITS) == 6) Multiplier = 100;   
 if (MarketInfo(symbol,MODE_DIGITS) == 7) Multiplier = 1000;
 pips2dbl = Multiplier*MarketInfo(symbol,MODE_POINT); 
}

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
{
    return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
{
}

//+------------------------------------------------------------------+
//| Expert tick function                                            |
//+------------------------------------------------------------------+
void OnTick()
{
    double williamsR = iWPR(NULL, 0, WilliamsR_Period, 0);
    double maValue = iMA(NULL, 0, MA_Period, 0, MA_Method, MA_Price, 0);
    int ticket;

    // Close all open buy trades when Williams %R is between -30 and 0
    if (williamsR >= -30 && williamsR <= 0)
    {
        for (int i = OrdersTotal() - 1; i >= 0; i--)
        {
            if (OrderSelect(i, SELECT_BY_POS) && OrderType() == OP_BUY)
            {
                if (OrderClose(OrderTicket(), OrderLots(), MarketInfo(OrderSymbol(), MODE_BID), 3))
                {
                    totalBuyTrades--;
                }
                else
                {
                    Print("Error closing buy order ", GetLastError());
                }
            }
        }
    }

    // Close all open sell trades when Williams %R is between -70 and -100
    if (williamsR >= -100 && williamsR <= -70)
    {
        for (int i = OrdersTotal() - 1; i >= 0; i--)
        {
            if (OrderSelect(i, SELECT_BY_POS) && OrderType() == OP_SELL)
            {
                if (OrderClose(OrderTicket(), OrderLots(), MarketInfo(OrderSymbol(), MODE_ASK), 3))
                {
                    totalSellTrades--;
                }
                else
                {
                    Print("Error closing sell order ", GetLastError());
                }
            }
        }
    }

    // Calculate the distance from the current price to the moving average
    double distanceToMA = MathAbs(maValue - Close[0]);

    // Calculate the ATR (Average True Range) to gauge market volatility
    double atr = iATR(NULL, 0, 14, 0);

    // Determine the trailing stop distance based on market volatility and distance from MA
    double trailingStopDistance = MathMax(atr * 2, distanceToMA * 0.5);

    // Check for Buy conditions
    if (williamsR <= -90 && williamsR >= -100 && totalBuyTrades < MaxTradesPerTrend && Close[1] > maValue)
    {
        ticket = OrderSend(Symbol(), OP_BUY, Trade_Lots, Ask, 2, 0, 0, "Buy Order", 0, trailingStopDistance, Green);
        if (ticket > 0)
        {
            totalBuyTrades++;
        }
        else
            Print("Error sending buy order ", GetLastError());
    }

    // Check for Sell conditions
    if (williamsR >= -10 && williamsR <= 0 && totalSellTrades < MaxTradesPerTrend && Close[1] < maValue)
    {
        ticket = OrderSend(Symbol(), OP_SELL, Trade_Lots, Bid, 2, 0, 0, "Sell Order", 0, trailingStopDistance, Red);
        if (ticket > 0)
        {
            totalSellTrades++;
        }
        else
            Print("Error sending sell order ", GetLastError());
    }
}
